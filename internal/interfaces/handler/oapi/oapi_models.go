// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package oapi

import (
	"encoding/json"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Defines values for LifeEventType.
const (
	Decrement LifeEventType = "decrement"
)

// Defines values for WsRequestType.
const (
	CardEvent WsRequestType = "cardEvent"
	LifeEvent WsRequestType = "lifeEvent"
)

// Defines values for WsResponseTypeType.
const (
	BlockCreated WsResponseTypeType = "blockCreated"
	CardReset    WsResponseTypeType = "cardReset"
	CardUsed     WsResponseTypeType = "cardUsed"
	LifeChanged  WsResponseTypeType = "lifeChanged"
	RailCreated  WsResponseTypeType = "railCreated"
	RailMerged   WsResponseTypeType = "railMerged"
)

// CardId defines model for CardId.
type CardId = openapi_types.UUID

// CardType defines model for CardType.
type CardType struct {
	Id string `json:"id"`
}

// LifeEventType defines model for LifeEventType.
type LifeEventType string

// PlayerId defines model for PlayerId.
type PlayerId = openapi_types.UUID

// RailId defines model for RailId.
type RailId = openapi_types.UUID

// WsRequest Websocket接続後、クライアントからサーバーに送信する
type WsRequest struct {
	Body WsRequest_Body `json:"body"`
	Type WsRequestType  `json:"type"`
}

// WsRequest_Body defines model for WsRequest.Body.
type WsRequest_Body struct {
	union json.RawMessage
}

// WsRequestBodyCardEvent defines model for WsRequestBodyCardEvent.
type WsRequestBodyCardEvent struct {
	Id   CardId   `json:"id"`
	Type CardType `json:"type"`
}

// WsRequestBodyLifeEvent defines model for WsRequestBodyLifeEvent.
type WsRequestBodyLifeEvent struct {
	Type LifeEventType `json:"type"`
}

// WsRequestType defines model for WsRequestType.
type WsRequestType string

// WsResponse defines model for WsResponse.
type WsResponse struct {
	Body WsResponse_Body `json:"body"`
	Type WsResponseType  `json:"type"`
}

// WsResponse_Body defines model for WsResponse.Body.
type WsResponse_Body struct {
	union json.RawMessage
}

// WsResponseBodyBlockCreated defines model for WsResponseBodyBlockCreated.
type WsResponseBodyBlockCreated struct {
	AttackerId PlayerId `json:"attackerId"`
	TargetId   PlayerId `json:"targetId"`
}

// WsResponseBodyCardReset defines model for WsResponseBodyCardReset.
type WsResponseBodyCardReset = []struct {
	Cards []struct {
		Id   CardId   `json:"id"`
		Type CardType `json:"type"`
	} `json:"cards"`
	PlayerId PlayerId `json:"playerId"`
}

// WsResponseBodyCardUsed defines model for WsResponseBodyCardUsed.
type WsResponseBodyCardUsed struct {
	Id       CardId   `json:"id"`
	PlayerId PlayerId `json:"playerId"`
}

// WsResponseBodyLifeChanged defines model for WsResponseBodyLifeChanged.
type WsResponseBodyLifeChanged struct {
	New      int      `json:"new"`
	PlayerId PlayerId `json:"playerId"`
}

// WsResponseBodyRailCreated defines model for WsResponseBodyRailCreated.
type WsResponseBodyRailCreated struct {
	AttackerId PlayerId `json:"attackerId"`
	Id         RailId   `json:"id"`
	ParentId   RailId   `json:"parentId"`
	TargetId   PlayerId `json:"targetId"`
}

// WsResponseBodyRailMerged defines model for WsResponseBodyRailMerged.
type WsResponseBodyRailMerged struct {
	ChildId  RailId   `json:"childId"`
	ParentId RailId   `json:"parentId"`
	PlayerId PlayerId `json:"playerId"`
}

// WsResponseType defines model for WsResponseType.
type WsResponseType struct {
	Type WsResponseTypeType `json:"type"`
}

// WsResponseTypeType defines model for WsResponseType.Type.
type WsResponseTypeType string

// GetWsSchemasJSONRequestBody defines body for GetWsSchemas for application/json ContentType.
type GetWsSchemasJSONRequestBody = WsRequest

// AsWsRequestBodyLifeEvent returns the union data inside the WsRequest_Body as a WsRequestBodyLifeEvent
func (t WsRequest_Body) AsWsRequestBodyLifeEvent() (WsRequestBodyLifeEvent, error) {
	var body WsRequestBodyLifeEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWsRequestBodyLifeEvent overwrites any union data inside the WsRequest_Body as the provided WsRequestBodyLifeEvent
func (t *WsRequest_Body) FromWsRequestBodyLifeEvent(v WsRequestBodyLifeEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWsRequestBodyLifeEvent performs a merge with any union data inside the WsRequest_Body, using the provided WsRequestBodyLifeEvent
func (t *WsRequest_Body) MergeWsRequestBodyLifeEvent(v WsRequestBodyLifeEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsWsRequestBodyCardEvent returns the union data inside the WsRequest_Body as a WsRequestBodyCardEvent
func (t WsRequest_Body) AsWsRequestBodyCardEvent() (WsRequestBodyCardEvent, error) {
	var body WsRequestBodyCardEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWsRequestBodyCardEvent overwrites any union data inside the WsRequest_Body as the provided WsRequestBodyCardEvent
func (t *WsRequest_Body) FromWsRequestBodyCardEvent(v WsRequestBodyCardEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWsRequestBodyCardEvent performs a merge with any union data inside the WsRequest_Body, using the provided WsRequestBodyCardEvent
func (t *WsRequest_Body) MergeWsRequestBodyCardEvent(v WsRequestBodyCardEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t WsRequest_Body) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WsRequest_Body) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWsResponseBodyLifeChanged returns the union data inside the WsResponse_Body as a WsResponseBodyLifeChanged
func (t WsResponse_Body) AsWsResponseBodyLifeChanged() (WsResponseBodyLifeChanged, error) {
	var body WsResponseBodyLifeChanged
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWsResponseBodyLifeChanged overwrites any union data inside the WsResponse_Body as the provided WsResponseBodyLifeChanged
func (t *WsResponse_Body) FromWsResponseBodyLifeChanged(v WsResponseBodyLifeChanged) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWsResponseBodyLifeChanged performs a merge with any union data inside the WsResponse_Body, using the provided WsResponseBodyLifeChanged
func (t *WsResponse_Body) MergeWsResponseBodyLifeChanged(v WsResponseBodyLifeChanged) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsWsResponseBodyCardUsed returns the union data inside the WsResponse_Body as a WsResponseBodyCardUsed
func (t WsResponse_Body) AsWsResponseBodyCardUsed() (WsResponseBodyCardUsed, error) {
	var body WsResponseBodyCardUsed
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWsResponseBodyCardUsed overwrites any union data inside the WsResponse_Body as the provided WsResponseBodyCardUsed
func (t *WsResponse_Body) FromWsResponseBodyCardUsed(v WsResponseBodyCardUsed) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWsResponseBodyCardUsed performs a merge with any union data inside the WsResponse_Body, using the provided WsResponseBodyCardUsed
func (t *WsResponse_Body) MergeWsResponseBodyCardUsed(v WsResponseBodyCardUsed) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsWsResponseBodyCardReset returns the union data inside the WsResponse_Body as a WsResponseBodyCardReset
func (t WsResponse_Body) AsWsResponseBodyCardReset() (WsResponseBodyCardReset, error) {
	var body WsResponseBodyCardReset
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWsResponseBodyCardReset overwrites any union data inside the WsResponse_Body as the provided WsResponseBodyCardReset
func (t *WsResponse_Body) FromWsResponseBodyCardReset(v WsResponseBodyCardReset) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWsResponseBodyCardReset performs a merge with any union data inside the WsResponse_Body, using the provided WsResponseBodyCardReset
func (t *WsResponse_Body) MergeWsResponseBodyCardReset(v WsResponseBodyCardReset) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsWsResponseBodyRailCreated returns the union data inside the WsResponse_Body as a WsResponseBodyRailCreated
func (t WsResponse_Body) AsWsResponseBodyRailCreated() (WsResponseBodyRailCreated, error) {
	var body WsResponseBodyRailCreated
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWsResponseBodyRailCreated overwrites any union data inside the WsResponse_Body as the provided WsResponseBodyRailCreated
func (t *WsResponse_Body) FromWsResponseBodyRailCreated(v WsResponseBodyRailCreated) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWsResponseBodyRailCreated performs a merge with any union data inside the WsResponse_Body, using the provided WsResponseBodyRailCreated
func (t *WsResponse_Body) MergeWsResponseBodyRailCreated(v WsResponseBodyRailCreated) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsWsResponseBodyRailMerged returns the union data inside the WsResponse_Body as a WsResponseBodyRailMerged
func (t WsResponse_Body) AsWsResponseBodyRailMerged() (WsResponseBodyRailMerged, error) {
	var body WsResponseBodyRailMerged
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWsResponseBodyRailMerged overwrites any union data inside the WsResponse_Body as the provided WsResponseBodyRailMerged
func (t *WsResponse_Body) FromWsResponseBodyRailMerged(v WsResponseBodyRailMerged) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWsResponseBodyRailMerged performs a merge with any union data inside the WsResponse_Body, using the provided WsResponseBodyRailMerged
func (t *WsResponse_Body) MergeWsResponseBodyRailMerged(v WsResponseBodyRailMerged) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsWsResponseBodyBlockCreated returns the union data inside the WsResponse_Body as a WsResponseBodyBlockCreated
func (t WsResponse_Body) AsWsResponseBodyBlockCreated() (WsResponseBodyBlockCreated, error) {
	var body WsResponseBodyBlockCreated
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWsResponseBodyBlockCreated overwrites any union data inside the WsResponse_Body as the provided WsResponseBodyBlockCreated
func (t *WsResponse_Body) FromWsResponseBodyBlockCreated(v WsResponseBodyBlockCreated) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWsResponseBodyBlockCreated performs a merge with any union data inside the WsResponse_Body, using the provided WsResponseBodyBlockCreated
func (t *WsResponse_Body) MergeWsResponseBodyBlockCreated(v WsResponseBodyBlockCreated) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t WsResponse_Body) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WsResponse_Body) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
